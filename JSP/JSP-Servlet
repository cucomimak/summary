1. Servlet : 자바 서버 프로그램
2. JSP : 자바 서버 페이지, 서블릿 기술과 동일하게 서버에서 동적으로 데이터를 구성하는 기술

3. Request
4. Response

5. HTTP :
HTTP(HyperText Transfer Protocol) 프로토콜은 웹 상에서 데이터를 주고받기 위한 프로토콜로, 클라이언트와 서버 간의 통신을 위해 사용됩니다. 
HTTP 요청과 응답은 각각의 구조를 가지고 있습니다.

1) HTTP 요청 구조:

HTTP 요청은 클라이언트가 서버로 보내는 메시지로, 웹 서버에 특정 동작을 요청하거나 리소스를 요청하는 데 사용됩니다.
요청은 다음과 같은 구조를 가집니다:
요청 라인(Request Line): 요청 메서드(GET, POST 등), 요청 대상 URL, 사용하는 HTTP 버전으로 구성됩니다.
헤더(Headers): 요청에 대한 여러 정보를 포함하며, 헤더 이름과 값의 쌍으로 이루어집니다.
빈 줄(Blank Line): 헤더와 메시지 바디를 구분하기 위한 빈 줄입니다.
메시지 바디(Message Body): 요청 본문으로, 요청하는 리소스의 데이터를 담습니다. 일부 요청은 바디를 포함하지 않을 수 있습니다.

2) HTTP 응답 구조:

HTTP 응답은 서버가 클라이언트에게 보내는 메시지로, 클라이언트의 요청에 대한 응답을 포함합니다.
응답은 다음과 같은 구조를 가집니다:
상태 라인(Status Line): HTTP 상태 코드(200 OK, 404 Not Found 등), 상태 코드에 대한 설명, 사용하는 HTTP 버전으로 구성됩니다.
헤더(Headers): 응답에 대한 여러 정보를 포함하며, 헤더 이름과 값의 쌍으로 이루어집니다.
빈 줄(Blank Line): 헤더와 메시지 바디를 구분하기 위한 빈 줄입니다.
메시지 바디(Message Body): 응답 본문으로, 요청한 리소스의 데이터를 담습니다. 일부 응답은 바디를 포함하지 않을 수 있습니다.


6. 서블릿 컨테이너
서블릿 컨테이너는 서블릿 기반의 웹 애플리케이션을 실행하는 환경을 제공합니다.
서블릿은 자바로 작성된 웹 애플리케이션의 동적인 부분을 처리하는 클래스입니다.
서블릿 컨테이너는 서블릿의 라이프사이클 관리, 요청과 응답 처리, 멀티스레딩 지원 등의 기능을 제공합니다.
주로 Java EE(이전의 J2EE) 서버와 함께 사용되며, 대표적인 예로는 Apache Tomcat, Jetty, Undertow 등이 있습니다.

7. JSP 컨테이너
JSP 컨테이너는 JSP 파일을 실행하고 처리하는 환경을 제공합니다.
JSP는 HTML 내부에 자바 코드를 포함하여 동적인 웹 페이지를 생성하는 기술입니다.
JSP 컨테이너는 JSP 파일을 서블릿으로 변환하고, 그것을 컴파일하여 실행합니다.
JSP 컨테이너는 서블릿과 마찬가지로 라이프사이클 관리, 요청과 응답 처리, 멀티스레딩 등의 기능을 제공합니다.
대표적인 JSP 컨테이너로는 Apache Tomcat, JBoss 등이 있습니다.

주요 차이점:

서블릿 컨테이너는 서블릿을 실행하는 데 중점을 두며, JSP를 포함하여 다양한 웹 애플리케이션 기술을 지원합니다.
JSP 컨테이너는 주로 JSP 파일을 처리하는 데 중점을 두며, JSP를 서블릿으로 변환하여 실행합니다.
서블릿과 JSP는 모두 자바를 기반으로 하지만, JSP는 HTML과 유사한 문법을 사용하여 웹 페이지를 작성하는 데 더 편리하며, 서블릿은 주로 비즈니스 로직을 구현하는 데 사용됩니다

8. 웹서버 & WAS
- 정의
Apache Tomcat은 WAS(Web Application Server)로 분류되며, 주로 자바 웹 애플리케이션을 실행하는 데 사용됩니다. Tomcat은 서블릿 컨테이너와 JSP 컨테이너를 포함하고 있어 자바 웹 애플리케이션을 실행할 수 있습니다.

한편, Apache HTTP Server는 웹 서버 소프트웨어로서 정적 파일을 제공하고 동적 콘텐츠 생성을 위해 다른 웹 애플리케이션 서버(WAS)와 통신할 수 있도록 하는 역할을 합니다. 주로 정적 웹 페이지, 이미지, CSS, JavaScript 등을 제공하는 데 사용됩니다.

따라서, Apache HTTP Server는 일반적으로 웹 서버로, Apache Tomcat은 WAS로 인식됩니다. 종종 두 개를 함께 사용하여 정적 콘텐츠 제공과 동적 콘텐츠 처리를 조합하여 전체적인 웹 애플리케이션 환경을 제공합니다.

- 작동 순서
일반적으로 클라이언트의 요청이 들어오면 먼저 웹 서버가 동작합니다. 웹 서버는 클라이언트로부터의 HTTP 요청을 받아들이고, 이 요청에 따라 정적인 콘텐츠(예: HTML 파일, 이미지, CSS 등)를 제공하거나 동적인 콘텐츠 요청인 경우에는 해당 요청을 WAS로 전달합니다.

웹 서버가 요청을 받으면 다음 단계로는 WAS가 동작합니다. 만약 요청이 동적인 콘텐츠인 경우, WAS는 해당 요청을 처리하기 위해 서블릿 또는 JSP와 같은 동적 웹 애플리케이션 컴포넌트를 실행합니다. 이러한 동작은 웹 서버와 WAS 간의 연동을 통해 이루어집니다.

따라서 클라이언트의 요청이 들어오면 먼저 웹 서버가 동작하고, 그 다음에 웹 서버는 필요에 따라 WAS로 요청을 전달하여 동적인 콘텐츠를 처리합니다.

- 웹서버의 정적/동적 콘텐츠 구별방법
정적인 콘텐츠와 동적인 콘텐츠를 구별하는 데는 일반적으로 요청된 자원의 경로나 확장자를 확인하는 방법이 사용됩니다. 이를 통해 웹 서버는 요청된 자원이 정적인 콘텐츠인지 동적인 콘텐츠인지를 판단할 수 있습니다.

1)정적인 콘텐츠:

주로 HTML 파일, 이미지, CSS, JavaScript 등과 같은 파일들이 포함됩니다.
보통 확장자를 통해 구별됩니다. 예를 들어, ".html", ".css", ".js", ".jpg", ".png" 등의 확장자를 가진 파일들은 주로 정적인 콘텐츠로 간주됩니다.
이러한 정적인 자원들은 요청이 들어오면 웹 서버가 해당 자원을 파일 시스템에서 찾아 직접 제공합니다.

2)동적인 콘텐츠:

주로 서블릿이나 JSP와 같은 서버 측 코드에 의해 생성되는 콘텐츠를 의미합니다.
일반적으로 특정 경로에 매핑된 URL에 대한 요청이나, 특정 확장자를 가진 파일에 대한 요청이 동적 콘텐츠를 나타냅니다.
예를 들어, "/api/*"와 같은 패턴의 URL은 주로 동적인 요청을 나타내며, ".jsp"나 ".do"와 같은 특정 확장자를 가진 파일 역시 동적인 요청을 나타낼 수 있습니다.
동적인 콘텐츠 요청은 웹 서버가 WAS로 전달되어 서버 측 코드에 의해 처리되고 동적으로 생성된 응답이 클라이언트에게 제공됩니다.
이러한 구별을 통해 웹 서버는 요청된 자원이 정적인지 동적인지를 판단하고, 각각에 따라 적절한 처리 방법을 취합니다.

** 좀 더 구체화하면...
웹 서버가 정적인 콘텐츠와 동적인 콘텐츠를 구별하는 주요 방법은 다음과 같습니다:

1) 확장자 기반 구별:

웹 서버는 클라이언트가 요청한 자원의 파일 확장자를 확인하여 정적인 콘텐츠와 동적인 콘텐츠를 구별합니다.
대부분의 경우 정적인 콘텐츠는 특정한 확장자를 가지고 있습니다. 예를 들어, ".html", ".css", ".js" 등의 확장자를 가진 파일들은 주로 정적인 콘텐츠로 간주됩니다.
반면에 동적인 콘텐츠는 특정 확장자를 갖지 않을 수도 있으며, 주로 특정한 URL 패턴에 매핑되어 처리됩니다.

2) URL 패턴 기반 구별:

웹 서버는 클라이언트가 요청한 URL 경로를 기반으로 정적인 콘텐츠와 동적인 콘텐츠를 구별합니다.
특정 URL 패턴이 정적인 콘텐츠를 나타내는 경우 해당 자원은 웹 서버에 의해 직접 제공됩니다.
반면에 특정 URL 패턴이 동적인 콘텐츠를 나타내는 경우 해당 요청은 WAS로 전달되어 처리됩니다.

3) 파일 시스템 구조 기반 구별:

웹 서버는 클라이언트의 요청된 자원이 서버의 파일 시스템에서 어디에 위치하는지를 확인하여 정적인 콘텐츠와 동적인 콘텐츠를 구별합니다.
정적인 콘텐츠는 일반적으로 특정 디렉토리에 저장되어 있으며, 웹 서버는 이러한 디렉토리에서 요청된 자원을 찾아 제공합니다.
동적인 콘텐츠는 서버의 특정 경로나 WAS로 전달되어 처리됩니다.
이러한 방법을 통해 웹 서버는 클라이언트 요청이 정적인 콘텐츠인지 동적인 콘텐츠인지를 구별하고, 각각에 따라 적절한 처리 방법을 취합니다.

